
import React, { useState, useEffect } from 'react';
import { Bug, FileText, Shield, AlertTriangle, CheckCircle, XCircle } from 'lucide-react';
import LoadingSpinner from './LoadingSpinner';
import './MalwareStaticAnalysis.css';

const MalwareStaticAnalysis = () => {
  const [analysisData, setAnalysisData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [selectedFile, setSelectedFile] = useState(null);

  const fetchAnalysisData = async () => {
    setLoading(true);
    try {
      const response = await fetch('http://localhost:5000/api/malware', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({}),
      });
      const data = await response.json();
      if (data.success) {
        setAnalysisData(data.analysis);
      }
    } catch (error) {
      console.error('Error fetching malware analysis data:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchAnalysisData();
  }, []);

  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      setSelectedFile(file);
      fetchAnalysisData(); // Simulate analysis
    }
  };

  const getRiskColor = (score) => {
    if (score >= 8) return '#ff4757';
    if (score >= 6) return '#ffa502';
    if (score >= 4) return '#ffd700';
    return '#7bed9f';
  };

  const getRiskLevel = (score) => {
    if (score >= 8) return 'Critical';
    if (score >= 6) return 'High';
    if (score >= 4) return 'Medium';
    return 'Low';
  };

  const getSeverityIcon = (severity) => {
    switch (severity) {
      case 'high': return <AlertTriangle size={16} />;
      case 'medium': return <Shield size={16} />;
      case 'low': return <CheckCircle size={16} />;
      default: return <XCircle size={16} />;
    }
  };

  return (
    <div className="malware-static-analysis">
      <div className="module-header">
        <h1 className="module-title">Malware Static Analysis</h1>
        <p className="module-description">
          Comprehensive static analysis and threat assessment of executable files
        </p>
      </div>

      <div className="upload-section">
        <div className="upload-card">
          <div className="upload-icon">
            <FileText size={48} />
          </div>
          <h3>Upload File for Analysis</h3>
          <p>Select an executable file (.exe, .dll, .bin) to analyze</p>
          <input
            type="file"
            accept=".exe,.dll,.bin"
            onChange={handleFileUpload}
            className="file-input"
            id="file-upload"
          />
          <label htmlFor="file-upload" className="upload-btn">
            Choose File
          </label>
          {selectedFile && (
            <div className="selected-file">
              <FileText size={16} />
              <span>{selectedFile.name}</span>
            </div>
          )}
        </div>
      </div>

      {loading ? (
        <div className="loading-container">
          <LoadingSpinner />
          <p>Analyzing file for malicious patterns...</p>
        </div>
      ) : analysisData ? (
        <div className="analysis-layout">
          <div className="main-analysis">
            <div className="risk-assessment">
              <div className="risk-header">
                <h3>Risk Assessment</h3>
                <div className="classification-badge" style={{
                  backgroundColor: getRiskColor(analysisData.risk_score)
                }}>
                  {analysisData.classification}
                </div>
              </div>
              
              <div className="risk-score-display">
                <div 
                  className="risk-circle"
                  style={{
                    background: `conic-gradient(${getRiskColor(analysisData.risk_score)} 0deg, ${getRiskColor(analysisData.risk_score)} ${analysisData.risk_score * 36}deg, rgba(255, 255, 255, 0.1) ${analysisData.risk_score * 36}deg)`
                  }}
                >
                  <div className="risk-inner">
                    <span className="risk-value">{analysisData.risk_score.toFixed(1)}</span>
                    <span className="risk-label">/10</span>
                  </div>
                </div>
                <div className="risk-details">
                  <span className="risk-level" style={{ color: getRiskColor(analysisData.risk_score) }}>
                    {getRiskLevel(analysisData.risk_score)} Risk
                  </span>
                  <span className="risk-description">
                    This file shows {getRiskLevel(analysisData.risk_score).toLowerCase()} indicators of malicious behavior
                  </span>
                </div>
              </div>
            </div>

            <div className="file-information">
              <h3>File Information</h3>
              <div className="info-grid">
                <div className="info-item">
                  <span className="info-label">File Name</span>
                  <span className="info-value">{analysisData.file_info.name}</span>
                </div>
                <div className="info-item">
                  <span className="info-label">File Size</span>
                  <span className="info-value">{analysisData.file_info.size}</span>
                </div>
                <div className="info-item">
                  <span className="info-label">File Type</span>
                  <span className="info-value">{analysisData.file_info.file_type}</span>
                </div>
                <div className="info-item">
                  <span className="info-label">MD5 Hash</span>
                  <span className="info-value hash">{analysisData.file_info.md5}</span>
                </div>
                <div className="info-item span-2">
                  <span className="info-label">SHA1 Hash</span>
                  <span className="info-value hash">{analysisData.file_info.sha1}</span>
                </div>
              </div>
            </div>

            <div className="threat-indicators">
              <h3>Threat Indicators</h3>
              <div className="indicators-list">
                {analysisData.threat_indicators.map((indicator, index) => (
                  <div key={index} className={`indicator-item ${indicator.severity}`}>
                    <div className="indicator-header">
                      <div className="indicator-icon">
                        {getSeverityIcon(indicator.severity)}
                      </div>
                      <span className="indicator-type">{indicator.type}</span>
                      <span className={`severity-badge ${indicator.severity}`}>
                        {indicator.severity.toUpperCase()}
                      </span>
                    </div>
                    <p className="indicator-description">{indicator.description}</p>
                  </div>
                ))}
              </div>
            </div>
          </div>

          <div className="analysis-sidebar">
            <div className="scan-status">
              <h3>Scan Status</h3>
              <div className="status-items">
                <div className="status-item completed">
                  <CheckCircle size={16} />
                  <span>File Signature Check</span>
                </div>
                <div className="status-item completed">
                  <CheckCircle size={16} />
                  <span>Entropy Analysis</span>
                </div>
                <div className="status-item completed">
                  <CheckCircle size={16} />
                  <span>String Extraction</span>
                </div>
                <div className="status-item completed">
                  <CheckCircle size={16} />
                  <span>Import Analysis</span>
                </div>
                <div className="status-item completed">
                  <CheckCircle size={16} />
                  <span>Behavioral Patterns</span>
                </div>
              </div>
            </div>

            <div className="detection-engines">
              <h3>Detection Engines</h3>
              <div className="engines-list">
                <div className="engine-item">
                  <span className="engine-name">VirusTotal</span>
                  <span className="detection-status clean">Clean</span>
                </div>
                <div className="engine-item">
                  <span className="engine-name">Hybrid Analysis</span>
                  <span className="detection-status suspicious">Suspicious</span>
                </div>
                <div className="engine-item">
                  <span className="engine-name">Any.run</span>
                  <span className="detection-status clean">Clean</span>
                </div>
                <div className="engine-item">
                  <span className="engine-name">Joe Sandbox</span>
                  <span className="detection-status malicious">Malicious</span>
                </div>
              </div>
            </div>

            <div className="quick-actions">
              <h3>Quick Actions</h3>
              <div className="action-buttons">
                <button className="action-btn primary">
                  <Bug size={16} />
                  Detailed Scan
                </button>
                <button className="action-btn secondary">
                  <FileText size={16} />
                  Generate Report
                </button>
                <button className="action-btn secondary">
                  <Shield size={16} />
                  Quarantine File
                </button>
              </div>
            </div>

            <div className="analysis-timeline">
              <h3>Analysis Timeline</h3>
              <div className="timeline-items">
                <div className="timeline-item">
                  <div className="timeline-dot"></div>
                  <div className="timeline-content">
                    <span className="timeline-action">File uploaded</span>
                    <span className="timeline-time">12:34:56</span>
                  </div>
                </div>
                <div className="timeline-item">
                  <div className="timeline-dot"></div>
                  <div className="timeline-content">
                    <span className="timeline-action">Static analysis started</span>
                    <span className="timeline-time">12:34:58</span>
                  </div>
                </div>
                <div className="timeline-item">
                  <div className="timeline-dot"></div>
                  <div className="timeline-content">
                    <span className="timeline-action">Threat indicators found</span>
                    <span className="timeline-time">12:35:12</span>
                  </div>
                </div>
                <div className="timeline-item">
                  <div className="timeline-dot active"></div>
                  <div className="timeline-content">
                    <span className="timeline-action">Analysis completed</span>
                    <span className="timeline-time">12:35:28</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      ) : null}
    </div>
  );
};

export default MalwareStaticAnalysis;
